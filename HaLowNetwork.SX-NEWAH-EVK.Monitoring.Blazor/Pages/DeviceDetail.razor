@page "/DeviceDetail"
@using HaLowNetwork.SX_NEWAH_EVK.Monitoring.Blazor.Services
@using HaLowNetwork.SX_NEWAH_EVK.Parse.Models
@using HaLow.Raspbian
@using HaLowNetwork.SX_NEWAH_EVK.Parse

<div class="row">
@if (_interface != null)
{
    <div class="col-lg-12">
        <h3>@_interface.Ip</h3>
        <p>@_interface.Mac (@_interface.Name)</p>
    </div>
    <div class="col-lg-12">
        <CollapsableView Show="true" Title="@_interface.Name">
            <div class="row" style="padding: 5px">
                <div class="col-lg-4">
                    <h6>Network</h6>
                    Ip: @_interface.Ip <br/>
                    Mask: @_interface.Mask <br/>
                    BroadCast: @_interface.Broadcast <br/>
                    Flags: @_interface.Flags <br/>
                </div>
                <div class="col-lg-4">
                    <h6>Rx</h6>
                    Traffic: @_interface.Rx.Packets (@_interface.Rx.Amount @_interface.Rx.Units) <br/>
                    Errors/Dropped: @_interface.Rx.Errors / @_interface.Rx.Dropped<br/>
                </div>
                <div class="col-lg-4">
                    <h6>Tx</h6>
                    Traffic: @_interface.Tx.Packets (@_interface.Tx.Amount @_interface.Tx.Units) <br/>
                    Errors/Dropped: @_interface.Tx.Errors / @_interface.Tx.Dropped<br/>
                </div>
            </div>
        </CollapsableView>
    </div>
    <div class="col-lg-12">
        <CollapsableView Show="true" Title="Mesh status">
            <MeshStatus Service="new MeshStatusService(_ssh)"></MeshStatus>
        </CollapsableView>
    </div>
}else
 {
     <div class="col-lg-12">
         <CollapsableView Title="Interface info" Show="true">
         <h3>Error fetch data</h3>
             <p>@_errorMessage</p>
             @if (_login)
             {
                 <SshLoginComponent @ref="_sshLogin"></SshLoginComponent>
             }
             else
             {
                 <a style="margin: 15px;" @onclick="() => { _login=!_login; StateHasChanged();}">Use different credentials</a>
             }

             <button class="btn btn-primary" @onclick="Load">Retry</button>
         </CollapsableView>
     </div>
 }
        <div class="col-lg-12">
            <CollapsableView Show="true" Title="Terminal via SSH">
                <SshContainer Ssh="_ssh"></SshContainer>
            </CollapsableView>
        </div>
    </div>



@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "ip")]
    public string Ip { get; set; }

    private SshService _ssh;
    private InterfaceModel _interface;
    private string _errorMessage;

    private SshLoginComponent _sshLogin = new();

    protected override void OnInitialized()
    {
        Load();
    }


    private bool _login = false;
    
    private void Load()
    {
        if (!string.IsNullOrEmpty(Ip))
        {
            _ssh = _sshLogin.Service(Ip);

            try
            {
                var output = _ssh.UseCommand(Commands.IFCONFIG_WLAN0);

                if (string.IsNullOrEmpty(output.Error))
                {
                    var ifc = output.Result.ToInterface();

                    if (ifc==null)
                    {
                        _errorMessage = "Error parse interface data.";
                    }
                    else
                    {
                        _interface = ifc;
                    }
                }
                else
                {
                    _errorMessage = output.Error; 
                }
               

            }
            catch (Exception e)
            {
                _errorMessage = e.Message;
            }
        }
        else
        {
            _errorMessage = "Ip address is null.";
        }
        _login = false;
        StateHasChanged();
    }

}